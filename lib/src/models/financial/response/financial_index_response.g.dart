// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'financial_index_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

FinancialIndexResponse _$FinancialIndexResponseFromJson(Map<String, dynamic> json) => FinancialIndexResponse(
      json['symbol'] as String?,
      (json['pe'] as num?)?.toDouble(),
      (json['pe4Q'] as num?)?.toDouble(),
      (json['peRank'] as num?)?.toInt(),
      (json['eps'] as num?)?.toDouble(),
      (json['eps_rank'] as num?)?.toInt(),
      (json['eps4Q'] as num?)?.toDouble(),
      (json['eps4Q_rank'] as num?)?.toInt(),
      (json['eps_diluted'] as num?)?.toDouble(),
      (json['eps4q_diluted'] as num?)?.toDouble(),
      json['first_trading_date'] as String?,
      (json['min52w'] as num?)?.toDouble(),
      (json['min52w_rank'] as num?)?.toInt(),
      (json['max52w'] as num?)?.toDouble(),
      (json['max52w_rank'] as num?)?.toInt(),
      (json['avg_trading_vol'] as num?)?.toInt(),
      (json['avg_trading_vol_rank'] as num?)?.toInt(),
      (json['listed_share_vol'] as num?)?.toInt(),
      (json['listed_share_vol_rank'] as num?)?.toInt(),
      (json['circulation_vol'] as num?)?.toInt(),
      (json['circulation_vol_rank'] as num?)?.toInt(),
      (json['roe'] as num?)?.toDouble(),
      (json['roe4Q'] as num?)?.toDouble(),
      (json['roe_rank'] as num?)?.toInt(),
      (json['pb'] as num?)?.toDouble(),
      (json['pb4Q'] as num?)?.toDouble(),
      (json['pb_rank'] as num?)?.toInt(),
      (json['roa'] as num?)?.toDouble(),
      (json['roa4Q'] as num?)?.toDouble(),
      (json['roa_rank'] as num?)?.toInt(),
      (json['year'] as num?)?.toInt(),
      (json['book_value'] as num?)?.toDouble(),
      (json['book_value4Q'] as num?)?.toDouble(),
      (json['book_value_rank'] as num?)?.toInt(),
      (json['the_beta'] as num?)?.toDouble(),
      (json['the_beta4Q'] as num?)?.toDouble(),
      (json['the_beta_rank'] as num?)?.toInt(),
      (json['market_cap'] as num?)?.toInt(),
      (json['market_cap_rank'] as num?)?.toInt(),
      (json['free_float'] as num?)?.toInt(),
      (json['free_float_rank'] as num?)?.toInt(),
      (json['free_float_rate'] as num?)?.toDouble(),
      (json['free_float_rate_rank'] as num?)?.toInt(),
      (json['group_id'] as num?)?.toInt(),
      json['group_name'] as String?,
      (json['group_count'] as num?)?.toInt(),
      (json['foreign_total_room'] as num?)?.toInt(),
      (json['foreign_current_room'] as num?)?.toInt(),
      (json['audit_firm_id'] as num?)?.toInt(),
      (json['audit_firm_year'] as num?)?.toInt(),
      (json['ev_per_ebitda'] as num?)?.toInt(),
      (json['ev_per_ebitda4Q'] as num?)?.toInt(),
      (json['ev_per_ebit'] as num?)?.toInt(),
      (json['ev_per_ebit4Q'] as num?)?.toInt(),
    );

Map<String, dynamic> _$FinancialIndexResponseToJson(FinancialIndexResponse instance) => <String, dynamic>{
      'symbol': instance.symbol,
      'pe': instance.pe,
      'pe4Q': instance.pe4Q,
      'peRank': instance.peRank,
      'eps': instance.eps,
      'eps_rank': instance.epsRank,
      'eps4Q': instance.eps4Q,
      'eps4Q_rank': instance.eps4QRank,
      'eps_diluted': instance.epsDiluted,
      'eps4q_diluted': instance.eps4qDiluted,
      'first_trading_date': instance.firstTradingDate,
      'min52w': instance.min52w,
      'min52w_rank': instance.min52wRank,
      'max52w': instance.max52w,
      'max52w_rank': instance.max52wRank,
      'avg_trading_vol': instance.avgTradingVol,
      'avg_trading_vol_rank': instance.avgTradingVolRank,
      'listed_share_vol': instance.listedShareVol,
      'listed_share_vol_rank': instance.listedShareVolRank,
      'circulation_vol': instance.circulationVol,
      'circulation_vol_rank': instance.circulationVolRank,
      'roe': instance.roe,
      'roe4Q': instance.roe4Q,
      'roe_rank': instance.roeRank,
      'pb': instance.pb,
      'pb4Q': instance.pb4Q,
      'pb_rank': instance.pbRank,
      'roa': instance.roa,
      'roa4Q': instance.roa4Q,
      'roa_rank': instance.roaRank,
      'year': instance.year,
      'book_value': instance.bookValue,
      'book_value4Q': instance.bookValue4Q,
      'book_value_rank': instance.bookValueRank,
      'the_beta': instance.theBeta,
      'the_beta4Q': instance.theBeta4Q,
      'the_beta_rank': instance.theBetaRank,
      'market_cap': instance.marketCap,
      'market_cap_rank': instance.marketCapRank,
      'free_float': instance.freeFloat,
      'free_float_rank': instance.freeFloatRank,
      'free_float_rate': instance.freeFloatRate,
      'free_float_rate_rank': instance.freeFloatRateRank,
      'group_id': instance.groupId,
      'group_name': instance.groupName,
      'group_count': instance.groupCount,
      'foreign_total_room': instance.foreignTotalRoom,
      'foreign_current_room': instance.foreignCurrentRoom,
      'audit_firm_id': instance.auditFirmId,
      'audit_firm_year': instance.auditFirmYear,
      'ev_per_ebitda': instance.evPerEbitda,
      'ev_per_ebitda4Q': instance.evPerEbitda4Q,
      'ev_per_ebit': instance.evPerEbit,
      'ev_per_ebit4Q': instance.evPerEbit4Q,
    };
